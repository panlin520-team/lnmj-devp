package com.lnmj.data.controller.backend;

import com.lnmj.common.Enum.ResponseEnum.errorMsgEnum.ResponseCodeEvaluatingEnum;
import com.lnmj.common.Enum.ResponseEnum.errorMsgEnum.ResponseCodePerformanceEnum;
import com.lnmj.common.response.Error;
import com.lnmj.common.response.ResponseResult;
import com.lnmj.data.business.IStatisticService;
import com.lnmj.data.entity.Score;
import com.lnmj.data.entity.Statistic;
import com.lnmj.data.repository.IScoreDao;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.apache.commons.lang3.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import javax.annotation.Resource;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

/**
 * @Author: yilihua
 * @Date: 2019/9/6 10:54
 * @Description: 统计(业绩,底薪,评分)
 */
@Api(description = "统计")
@RestController
@RequestMapping("/statistic")
public class StatisticController {
    @Resource
    private IStatisticService statisticService;
    @Resource
    private IScoreDao scoreDao;
    /**
    *@Description 客户等级分页显示
    *@Param [pageNum, pageSize, access_token]
    *@Return com.lnmj.common.response.ResponseResult
    *@Author yilihua
    *@Date 2019/10/25
    *@Time 19:06
    */
    @ApiOperation(value = "客户等级分页显示", notes = "客户等级分页显示")
    @RequestMapping(value = "/selectUserEvaluatingList", method = RequestMethod.POST)
    public ResponseResult selectUserEvaluatingList(@RequestParam(value = "pageNum", defaultValue = "1") int pageNum,
                                               @RequestParam(value = "pageSize", defaultValue = "10") int pageSize,Long evaluatingLevelID,Long evaluatingID, String access_token) {
        return statisticService.selectUserEvaluatingList(pageNum,pageSize,evaluatingLevelID,evaluatingID);
    }
    
    /**
    *@Description 客户评测等级
    *@Param [userId, startDate, endDate]
    *@Return com.lnmj.common.response.ResponseResult
    *@Author yilihua
    *@Date 2019/10/25
    *@Time 10:41
    */
    @ApiOperation(value = "客户评测等级", notes = "客户评测等级")
    @RequestMapping(value = "/statisticEvaluating", method = RequestMethod.POST)
    public ResponseResult statisticEvaluating(Long userId, String startDate,String endDate) {
        //当前时间的等级（在多少天内消费了好多达到等级）
        if(userId==null){
            return ResponseResult.error(new Error(ResponseCodeEvaluatingEnum.USER_ID_NULL.getCode(),
                    ResponseCodeEvaluatingEnum.USER_ID_NULL.getDesc()));
        }
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date start = null;
        Date end = new Date();
        if(!StringUtils.isBlank(startDate)){
            try {
                start = sdf.parse(startDate);
            } catch (ParseException e) {
                return ResponseResult.error(new Error(ResponseCodeEvaluatingEnum.STATISTICDATE_EROOR.getCode(),
                        ResponseCodeEvaluatingEnum.STATISTICDATE_EROOR.getDesc()));
            }
        }
        if(!StringUtils.isBlank(endDate)){
            try {
                end = sdf.parse(endDate);
            } catch (ParseException e) {
                return ResponseResult.error(new Error(ResponseCodeEvaluatingEnum.STATISTICDATE_EROOR.getCode(),
                        ResponseCodeEvaluatingEnum.STATISTICDATE_EROOR.getDesc()));
            }
        }
        return statisticService.statisticEvaluating(userId,start,end);
    }

    /**
     *@Description 工资分页显示
     *@Param [pageNum, pageSize, access_token]
     *@Return com.lnmj.common.response.ResponseResult
     *@Author yilihua
     *@Date 2019/9/10
     *@Time 10:22
     */
    @ApiOperation(value = "工资分页显示", notes = "工资分页显示")
    @RequestMapping(value = "/selectStatisticsList", method = RequestMethod.POST)
    public ResponseResult selectStatisticsList(@RequestParam(value = "pageNum", defaultValue = "1") int pageNum,
                                               @RequestParam(value = "pageSize", defaultValue = "10") int pageSize, String access_token) {
        return statisticService.selectStatisticsList(pageNum,pageSize);
    }
    /**
     *@Description 个人工资统计
     *@Param [salesmanID, date]
     *@Return com.lnmj.common.response.ResponseResult
     *@Author yilihua
     *@Date 2019/9/10
     *@Time 10:22
     */
    @ApiOperation(value = "个人工资统计", notes = "个人工资统计")
    @RequestMapping(value = "/salesmanStatistic", method = RequestMethod.POST)
    public ResponseResult salesmanStatistic(Long salesmanID, String startDate,String endDate){
        if(salesmanID==null){
            return ResponseResult.error(new Error(ResponseCodePerformanceEnum.SALESMAN_ID_NULL.getCode(),
                    ResponseCodePerformanceEnum.SALESMAN_ID_NULL.getDesc()));
        }
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Calendar calendar = Calendar.getInstance(); //当前日期
        calendar.add(Calendar.MONTH,-1);//上个月
        int actualMinimum = calendar.getActualMinimum(Calendar.DAY_OF_MONTH);
        int actualMaximum = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
        calendar.set(calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH),actualMinimum,
                00,00,00);
        Date start = calendar.getTime();  //上月初
        calendar.set(calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH),actualMaximum,
                23,59,59);
        Date end = calendar.getTime();    //上月末
        if(!StringUtils.isBlank(startDate)){
            try {
                start = sdf.parse(startDate);
            } catch (ParseException e) {
                return ResponseResult.error(new Error(ResponseCodePerformanceEnum.STATISTICDATE_EROOR.getCode(),
                        ResponseCodePerformanceEnum.STATISTICDATE_EROOR.getDesc()));
            }
        }
        if(!StringUtils.isBlank(endDate)){
            try {
                end = sdf.parse(endDate);
            } catch (ParseException e) {
                return ResponseResult.error(new Error(ResponseCodePerformanceEnum.STATISTICDATE_EROOR.getCode(),
                        ResponseCodePerformanceEnum.STATISTICDATE_EROOR.getDesc()));
            }
        }
        Statistic statistic = new Statistic();
        Statistic statisticPerformance = statisticService.statisticPerformance(salesmanID, start,end);
        HashMap<String, Object> performanceMap = statisticPerformance.getPerformanceMap();
        //0 初始化 1 业绩没有被统计过,2 业绩被统计完，3 没有业绩可以统计(只有底薪)
        Object flag = performanceMap.get("flag");
        if(flag.equals(0) || flag.equals(2)){
            return statisticService.selectStatisticsBysalesmanAndDate(salesmanID,start,end);
        }
        performanceMap.remove("flag");



        List<Score> scoreList = scoreDao.selectScoreByPostId(Long.parseLong(performanceMap.get("postId").toString()));
        if (scoreList.size()==0){
            return ResponseResult.error(new Error(ResponseCodePerformanceEnum.SCORE_LIST_NULL.getCode(),
                    ResponseCodePerformanceEnum.SCORE_LIST_NULL.getDesc()));
        }
        performanceMap.put("scoreList",scoreList);
        Statistic statisticsBaseSalary = statisticService.StatisticsBaseSalary(performanceMap);
        statistic.setSalesmanID(salesmanID);
        statistic.setLadderDetailed(statisticPerformance.getLadderDetailed());
        statistic.setAmountPerformance(statisticPerformance.getAmountPerformance());
        statistic.setNumberPerformance(statisticPerformance.getNumberPerformance());
        statistic.setStoreId(statisticPerformance.getStoreId());
        statistic.setStatisticDateStart(start);
        statistic.setStatisticDateEnd(end);
        statistic.setScore(statisticsBaseSalary.getScore());
        statistic.setBaseSalary(statisticsBaseSalary.getBaseSalary());
        statistic.setTakePercentage(statisticPerformance.getTakePercentage());
        statistic.setSalary(statisticsBaseSalary.getBaseSalary().add(statisticPerformance.getTakePercentage()));

        return ResponseResult.success(statistic)/*statisticService.insertStatistic(statistic)*/;
    }

    /**
     *@Description
     *@Param [storeId]
     *@Return com.lnmj.common.response.ResponseResult
     *@Author Mr.Ren
     *@Date 2019/10/15
     *@Time
     */
    @ApiOperation(value = "统计工资首页柱状显示", notes = "统计工资首页柱状显示")
    @RequestMapping(value = "/selectSalaryList", method = RequestMethod.POST)
    public ResponseResult selectSalaryList(String storeId) {
        return statisticService.selectSalaryList(storeId);
    }
}
